use("university");
db.grades.findOne()

// 1. Buscar los documentos donde el alumno tiene: 
// (i) un puntaje mayor o igual a 80  en "exam" o bien un puntaje mayor o igual a 90 en "quiz" y 
// (ii) un puntaje mayor o igual a 60 en todos los "homework" (en otras palabras no tiene un puntaje menor a 60 en algún "homework") 
// Se debe mostrar todos los campos excepto el _id, ordenados por el id de la clase y id del alumno en orden descendente y ascendente respectivamente..

// Lo que entiendo del enunciado es:
//  1. Ningun homework debe estar por debajo de un score de 60.
//  2. El alumno debe cumplir con alguna nota en exam >= 80 O quiz >= 90
// Finalmente es un AND entre "ningun homework menor que 60" y (exam >= 80 O quiz >= 90) 
use("university");
db.grades.find(
    {
        $and: [
            {
                $or: [
                    {
                        scores: {
                            $elemMatch: {
                                score: {$gte: 80},
                                type: "exam"
                            }
                        }
                    },
                    {
                        scores: {
                            $elemMatch: {
                                score: {$gte: 90},
                                type: "quiz"
                            }
                        }
                    }
                ],
                scores: { // Ningun homework debe estar por debajo de 60
                    $not: {
                        $elemMatch: {
                            score: {$lt: 60},
                            type: "homework"
                        }
                    }
                }

            }

        ]
    },
    {_id: 0} // No muestro el id.
).sort({class_id: 1,student_id: -1})

// 2. Calcular el puntaje mínimo, promedio, y máximo que obtuvo el alumno en las clases 20, 220, 420. El resultado debe mostrar además el id de la clase y el id del alumno, ordenados por alumno y clase en orden ascendentes. 
use("university");
db.grades.aggregate(
    [
        {
            $match: {
                class_id: {
                    $in: [20, 220, 420] // Filtro primero las clases que me interesan.
                }
            }
        },
        {
            $unwind: "$scores" // Despliego el arreglo scores.
        },
        {
            $group: { // Agrupo por clase y estudiante.
                _id: {
                    class_id: "$class_id",
                    student_id: "$student_id"
                },
                min_score: {
                    $min: "$scores.score"
                },
                avg_score: {
                    $avg: "$scores.score"
                },
                max_score: {
                    $max: "$scores.score"
                }
            }
        },
        {
            $sort: {
                "_id.student_id": 1,
                "_id.class_id": 1
            }
        }
    ]
)

// 3. Para cada clase listar el puntaje máximo de las evaluaciones de tipo "exam" y el puntaje máximo de las evaluaciones de tipo "quiz". Listar en orden ascendente por el id de la clase. HINT: El operador $filter puede ser de utilidad.
use("university");
db.grades.aggregate(
    [
        {
            $unwind: "$scores" // Nuevamente despliego el arreglo scores.
        },
        {
            $group: {
                _id: "$class_id", // Agrupo por clase y calculo el maximo score en exam y en quiz.
                max_score_in_exams: {
                    $max: {
                        $cond: {
                            if: {$eq: ["$scores.type", "exam"]},
                            then: "$scores.score",
                            else: 0
                        }
                    }
                },
                max_score_in_quizs: {
                    $max: {
                        $cond: {
                            if: {$eq: ["$scores.type", "quiz"]},
                            then: "$scores.score",
                            else: 0
                        }
                    }
                }
            }
        },
        {
            $sort: {_id: 1}
        }
    ]
)

// 4. Crear una vista "top10students" que liste los 10 estudiantes con los mejores promedios.
use("university");
db.top10students.drop()
db.createView(
    "top10students",
    "grades",
    [
        {
            $unwind: "$scores"
        },
        {
            $group: {
                _id: "$student_id",
                avg_score: {
                    $avg: "$scores.score"
                }
            }
        },
        {
            $sort: {avg_score: -1}
        },
        {
            $limit: 10
        }
    ]
)
use("university");
db.top10students.find()

// 5. Actualizar los documentos de la clase 339, agregando dos nuevos campos: el campo "score_avg" que almacena el puntaje promedio y el campo "letter" que tiene el valor "NA" si el puntaje promedio está entre [0, 60), el valor "A" si el puntaje promedio está entre [60, 80) y el valor "P" si el puntaje promedio está entre [80, 100]. 
// HINTS: (i) para actualizar se puede usar pipeline de agregación. (ii) El operador $cond o $switch pueden ser de utilidad.
use("university");
db.grades.updateMany(
    {
        class_id: 339
    },
    [
        { // Agrego el campo score_avg.
            $addFields: {
                score_avg: {$avg: "$scores.score"}
            }
        },
        { // Agrego el campo letter dependiendo el promedio de los scores.
            $addFields: {
                letter: {
                    $switch: {
                        branches: [
                            {
                                case: {$gte: [{$avg: "$scores.score"}, 80]},
                                then: "P"
                            },
                            {
                                case: {$gte: [{$avg: "$scores.score"}, 60]},
                                then: "A"
                            }
                        ],
                        default: "NA"
                    }
                }
            }
        }
    ]
)
// Chequeo a ojo que el campo letter este ok con esta query.
use("university");
db.grades.find(
    {
        class_id: 339
    }
)

// 6. (a) Especificar reglas de validación en la colección grades para todos sus campos y subdocumentos anidados. Inferir los tipos y otras restricciones que considere adecuados para especificar las reglas a partir de los documentos de la colección. 
// (b) Testear la regla de validación generando dos casos de fallas en la regla de validación y un caso de éxito en la regla de validación. Aclarar en la entrega cuales son los casos y por qué fallan y cuales cumplen la regla de validación. Los casos no deben ser triviales, es decir los ejemplos deben contener todos los campos..
use("university");
db.runCommand({
    collMod: "grades",
    validator: {
        $jsonSchema: {
            bsonType: "object",
            required: ["class_id", "student_id", "scores"],
            properties: {
                class_id: {
                    bsonType: "int",
                    minimum: 0
                },
                student_id: {
                    bsonType: "int",
                    minimum: 0
                },
                scores: {
                    bsonType: "array",
                    items: {
                        bsonType: "object",
                        required: ["type", "score"],
                        properties: {
                            type: {
                                enum: ["exam", "quiz", "homework"]
                            },
                            score: {
                                bsonType: "int",
                                minimum: 0,
                                maximum: 100
                            }
                        }
                    }
                }
            }
        }
    }
})

// Caso de falla 1
use("university");
db.grades.insertOne({
    class_id: -1, // No valida porque el id minimo para una clase es cero.
    student_id: -23, // No valida porque el id minimo para un estudiante es cero.
    scores: [
        {
            type: "exam",
            score: 80
        },
        {
            type: "quiz",
            score: 90
        },
        {
            type: "homework",
            score: 101 // No valida porque supera el maximo establecido para score.
        }
    ]
})

// Caso de falla 2
use("university");
db.grades.insertOne({
    class_id: 339,
    student_id: 1,
    scores: [
        {
            type: "exam",
            score: 80
        },
        {
            type: "final work", // No valida porque "final work" no esta contemplado en el tipo de una nota.
            score: 90
        },
        {
            type: "homework",
            score: -101 // No valida porque es menor que el minimo establecido para score.
        }
    ]
})

// Caso de éxito
use("university");
db.grades.insertOne({
    class_id: 339,
    student_id: 1,
    scores: [
        {
            type: "exam",
            score: 80
        },
        {
            type: "quiz",
            score: 90
        },
        {
            type: "homework",
            score: 100
        }
    ]
})

