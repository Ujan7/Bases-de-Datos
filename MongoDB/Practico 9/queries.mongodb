//1. Especificar en la colección users las siguientes reglas de validación: El campo name (requerido) debe ser un string con un máximo de 30 caracteres, email (requerido) debe ser un string que matchee con la expresión regular: "^(.*)@(.*)\\.(.{2,4})$" , password (requerido) debe ser un string con al menos 50 caracteres.
use('restaurantdb');
db.runCommand(
    {
        collMod: "restaurants",
        validator: {
            $jsonSchema: {
                bsonType: "object",
                required: ["name", "email"],
                properties: {
                    name: {
                        bsonType: "string",
                        maxLength: 30,
                    },
                    password: {
                        bsonType: "string",
                        minLength: 50
                    },
                    email: {
                        bsonType: "string",
                        pattern: "^(.*)@(.*)\\.(.{2,4})$"
                    }
                }
            }
        }
    }
)

// Insert examples:
//  --valid one:
use('restaurantdb');
db.restaurants.insertOne({
    name: "Good Eats",
    email: "contact@goodeats.com",
    password: "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890"
});
//  --invalid-one:
use('restaurantdb');
db.restaurants.insertOne({
    name: "Bad Eats with a Very Long Name That Exceeds Limits",
    email: "contact-at-badeats",
    password: "shortpass"
});

// 2. Proved with the first example.

// 3. Especificar en la colección theaters las siguientes reglas de validación: El campo theaterId (requerido) debe ser un int y location (requerido) debe ser un object con:
// un campo address (requerido) que sea un object con campos street1, city, state y zipcode todos de tipo string y requeridos
// un campo geo (no requerido) que sea un object con un campo type, con valores posibles “Point” o null y coordinates que debe ser una lista de 2 doubles
// Por último, estas reglas de validación no deben prohibir la inserción o actualización de documentos que no las cumplan sino que solamente deben advertir.

use('mflix');
db.runCommand(
    {
        collMod: "theaters",
        validator: {
            $jsonSchema: {
                bsonType: "object",
                required: ["theatherId", "location"],
                properties: {
                    theatherId: {
                        bsonType: "int",
                    },
                    location: {
                        bsonType: "object",
                        required: ["address"],
                        properties: {
                            address: {
                                bsonType: "object",
                                required: ["street1", "city", "state", "zipcode"],
                                properties: {
                                    street1: {
                                        bsonType: "string"
                                    },
                                    city: {
                                        bsonType: "string"
                                    },
                                    state: {
                                        bsonType: "string"
                                    },
                                    zipcode: {
                                        bsonType: "string"
                                    }
                                }
                            },
                            geo: {
                                bsonType: "object",
                                properties: {
                                    type: {
                                        enum: ["Point", null]
                                    },
                                    coordinates: {
                                        bsonType: "array",
                                        items: {
                                            type: "number"
                                        },
                                        minLength: 2,
                                        maxLength: 2
                                    }
                                }
                            }
                        }
                    },
                }
            }
        },
        validationAction: "warn" 
    }
)

// insert examples:
//  --valid-one:
use('mflix');
db.theaters.insertOne({
    theaterId: 1,
    location: {
        address: {
            street1: "123 Main St",
            city: "Anytown",
            state: "CA",
            zipcode: "12345"
        },
        geo: {
            type: "Point",
            coordinates: [-122.4194, 37.7749]
        }
    }
});
// --invalid-one:
db.theaters.insertOne({
    theaterId: "ABC",
    location: {
        address: {
            street1: "456 Broadway",
            city: "Somewhere",
            state: "XY",
            zipcode: 67890
        },
        geo: {
            type: "InvalidType",
            coordinates: [-73.935242]
        }
    }
});

// 4.Especificar en la colección movies las siguientes reglas de validación: El campo title (requerido) es de tipo string, year (requerido) int con mínimo en 1900 y máximo en 3000, y que tanto cast, directors, countries, como genres sean arrays de strings sin duplicados.
// Hint: Usar el constructor NumberInt() para especificar valores enteros a la hora de insertar documentos. Recordar que mongo shell es un intérprete javascript y en javascript los literales numéricos son de tipo Number (double).
use('mflix');
db.runCommand(
    {
        collMod: "movies",
        validator: {
            $jsonSchema: {
                bsonType: "object",
                required: ["title", "year"],
                properties: {
                    title: {
                        bsonType: "string",
                    },
                    year: {
                        bsonType: "int",
                        minimum: 1900,
                        maximum: 3000
                    },
                    cast: {
                        bsonType: "array",
                        items: {
                            type: "string"
                        },
                        uniqueItems: true
                    },
                    directors: {
                        bsonType: "array",
                        items: {
                            type: "string"
                        },
                        uniqueItems: true
                    },
                    countries: {
                        bsonType: "array",
                        items: {
                            type: "string"
                        },
                        uniqueItems: true
                    },
                    genres: {
                        bsonType: "array",
                        items: {
                            type: "string"
                        },
                        uniqueItems: true
                    }
                }
            }
        }
    }
)

// insert examples:
//  --valid-one:
db.movies.insertOne({
    title: "Inception",
    year: 2010,
    cast: ["Leonardo DiCaprio", "Joseph Gordon-Levitt", "Elliot Page"],
    directors: ["Christopher Nolan"],
    countries: ["USA"],
    genres: ["Action", "Sci-Fi", "Adventure"]
});
//  --invalid-one:
db.movies.insertOne({
    title: "The Great Train Robbery",
    year: 1896, // Inválido: el año está por debajo del mínimo de 1900
    cast: ["George Barnes", "Alfred C. Abadie"],
    directors: ["Edwin S. Porter"],
    countries: ["USA"],
    genres: ["Crime", "Drama"]
});

// 5.Crear una colección userProfiles con las siguientes reglas de validación: Tenga un campo user_id (requerido) de tipo “objectId”, un campo language (requerido) con alguno de los siguientes valores [ “English”, “Spanish”, “Portuguese” ] y un campo favorite_genres (no requerido) que sea un array de strings sin duplicados.
use('mflix');
db.createCollection("userProfiles",
    {
        validator: {
            $jsonSchema: {
                bsonType: "object",
                required: ["userId", "language"],
                properties: {
                    user_id: {
                        bsonType: "objectId",
                    },
                    language: {
                        enum: ["English", "Spanish", "Portuguese"]
                    },
                    favorite_genres: {
                        bsonType: "array",
                        items: {
                            type: "string"
                        },
                        uniqueItems: true
                    }
                }
            }
        }
    }
)


